[

  
    {
      "title"			: "Big Data, Data Science, Database i fondamentali 2",
      "link"			: "http://massimocaliman.it/articles/bigdata_datascience_database_i_fondamentali_2/",
      "excerpt"		: "
"
    }
  

  
    ,{
      "title"			: "Big Data, Data Science, Database i fondamentali 1",
      "link"			: "http://massimocaliman.it/articles/bigdata_datascience_database_i_fondamentali_1/",
      "excerpt"		: "
"
    }
  

  
    ,{
      "title"			: "Interfacce con il mondo esterno in R",
      "link"			: "http://massimocaliman.it/articles/linguaggio_r_%20interfacce_con_il_%20mondo_esterno/",
      "excerpt"		: "
"
    }
  

  
    ,{
      "title"			: "Funzioni che implementano cicli in R",
      "link"			: "http://massimocaliman.it/articles/linguaggio_r_funzioni_che_implementano_cicli/",
      "excerpt"		: "<h2 id="loop-dalla-riga-di-comando">Loop dalla riga di comando</h2>

"
    }
  

  
    ,{
      "title"			: "Oggetti data, orari e intervalli di tempo in R",
      "link"			: "http://massimocaliman.it/articles/linguaggio_r_date_e_orari/",
      "excerpt"		: "
"
    }
  

  
    ,{
      "title"			: "le funzioni in R",
      "link"			: "http://massimocaliman.it/articles/linguaggio_r_funzioni/",
      "excerpt"		: "<p>Le funzioni sono create usando la direttiva <code>function()</code> e memorizzate come qualsiasi altro oggetto in R. 
In particolare sono oggetti di classe funzione.</p>

"
    }
  

  
    ,{
      "title"			: "Le strutture di controllo di R",
      "link"			: "http://massimocaliman.it/articles/linguaggio_r_strutture_di_controllo/",
      "excerpt"		: "<p>Le strutture di controllo in R consentono di controllare il flusso di esecuzione del programma, in base alle condizioni a runtime in maniera non dissimile da qualsiasi altro linguaggio imperativo (come C,Java,Python), vediamo velocemente le parole riservate dedicate alle strutture di controllo</p>

"
    }
  

  
    ,{
      "title"			: "Il design pattern State",
      "link"			: "http://massimocaliman.it/java/state-pattern-java-examples/",
      "excerpt"		: "Caratteristiche e codice di esempio ridotto all'essenziale"
    }
  

  
    ,{
      "title"			: "Linguaggio R introduzione",
      "link"			: "http://massimocaliman.it/articles/linguaggio_r_introduzione/",
      "excerpt"		: "<p>Ho scoperto il linguaggio di programmazione R quasi per caso e ne sono rimasto affascinato.
La prima cosa da sapere è che R è più di un linguaggio di programmazione, è anche un ambiente di sviluppo completo. 
Basato sul linguaggio S è utilizzato per la gestione e l’analisi statistica di dati per la produzione di grafici ed è disponibile gratuitamente sotto i vincoli della licenza GPL.</p>

"
    }
  

  
    ,{
      "title"			: "Il design pattern Visitor",
      "link"			: "http://massimocaliman.it/java/visitor-pattern-java-examples/",
      "excerpt"		: "Codice di esempio minimale sul pattern Interpreter"
    }
  

  
    ,{
      "title"			: "Il design pattern Singleton",
      "link"			: "http://massimocaliman.it/java/singleton-pattern-java-examples/",
      "excerpt"		: "Alcuni esempi sul pattern Singleton"
    }
  

  
    ,{
      "title"			: "Il design pattern Interpreter",
      "link"			: "http://massimocaliman.it/java/interpreter-pattern-java-examples/",
      "excerpt"		: "Codice di esempio minimale sul pattern Interpreter"
    }
  

  
    ,{
      "title"			: "Il design pattern Chain Of Responsibility",
      "link"			: "http://massimocaliman.it/java/chain-of-responsibility-pattern-java-examples/",
      "excerpt"		: "Codice di esempio minimale sul pattern CoF"
    }
  

  
    ,{
      "title"			: "Il design pattern Strategy",
      "link"			: "http://massimocaliman.it/java/strategy-pattern-java-examples/",
      "excerpt"		: "Codice di esempio minimale sul pattern Strategy"
    }
  

  
    ,{
      "title"			: "La classe java.time.LocalTime",
      "link"			: "http://massimocaliman.it/java/localtime1/",
      "excerpt"		: "Finalmente qualcosa di nuovo sulle Date in Java(8)"
    }
  

  
    ,{
      "title"			: "Ubuntu 14.04.02 LTS installare subversion (svn)",
      "link"			: "http://massimocaliman.it/articles/ubuntu-14.04.02-LTS-installare-subversion/",
      "excerpt"		: "<p>Parte della disumanità del computer sta nel fatto che, una volta programmato e messo in funzione, si comporta in maniera perfettamente onesta. <em>(Isaac Asimov, Il vento è cambiato, 1983)</em></p>

"
    }
  

  
    ,{
      "title"			: "Ubuntu 14.04.02 LTS installare git",
      "link"			: "http://massimocaliman.it/articles/ubuntu-14.04.02-LTS-installare-git/",
      "excerpt"		: "<p>Parte della disumanità del computer sta nel fatto che, una volta programmato e messo in funzione, si comporta in maniera perfettamente onesta. <em>(Isaac Asimov, Il vento è cambiato, 1983)</em></p>

"
    }
  

  
    ,{
      "title"			: "Ubuntu 14.04.02 LTS abilitare l’utente root",
      "link"			: "http://massimocaliman.it/articles/ubuntu-14.04.02-LTS-abilitare-root/",
      "excerpt"		: "<p>Parte della disumanità del computer sta nel fatto che, una volta programmato e messo in funzione, si comporta in maniera perfettamente onesta. <em>(Isaac Asimov, Il vento è cambiato, 1983)</em></p>

"
    }
  

  
    ,{
      "title"			: "Ubuntu 14.04.02 LTS 64bit installare Open SSH",
      "link"			: "http://massimocaliman.it/articles/ubuntu-14.04.02-LTS-install-openssh/",
      "excerpt"		: "<p>Parte della disumanità del computer sta nel fatto che, una volta programmato e messo in funzione, si comporta in maniera perfettamente onesta. <em>(Isaac Asimov, Il vento è cambiato, 1983)</em></p>

"
    }
  

  
    ,{
      "title"			: "Abilitare il comando sudo su debian 8",
      "link"			: "http://massimocaliman.it/articles/debian-8-abilitare-sudo/",
      "excerpt"		: "<p>Parte della disumanità del computer sta nel fatto che, una volta programmato e messo in funzione, si comporta in maniera perfettamente onesta. <em>(Isaac Asimov, Il vento è cambiato, 1983)</em></p>

"
    }
  

  
    ,{
      "title"			: "Login e pagine sicure con JSF 2",
      "link"			: "http://massimocaliman.it/java/JSF22SecureLoginWebapp/",
      "excerpt"		: "<p>In questo post vediamo come realizzare un sistema minimo di login con sicurezza di base in una applicazione Java Server Faces 2.2.</p>

"
    }
  

  
    ,{
      "title"			: "Creare un custom Converter in JSF 2.2",
      "link"			: "http://massimocaliman.it/java/creare-un-custom-converter-in-jsf-2/",
      "excerpt"		: "<p>Un anno speso nell’intelligenza artificiale è abbastanza perchè una persona creda in Dio.
<em>(Alan Perlis)</em></p>

"
    }
  

  
    ,{
      "title"			: "Facili le dropdownbox con le JSF 2.2!",
      "link"			: "http://massimocaliman.it/java/facili-le-dropdownbox-con-le-jsf-2/",
      "excerpt"		: "<p>Un anno speso nell’intelligenza artificiale è abbastanza perchè una persona creda in Dio.
<em>(Alan Perlis)</em></p>

"
    }
  

  
    ,{
      "title"			: "JSF 2 Come usare i commenti",
      "link"			: "http://massimocaliman.it/java/jsf-2-come-usare-i-commenti/",
      "excerpt"		: "<p>Parte della disumanità del computer sta nel fatto che, una volta programmato e messo in funzione, si comporta in maniera perfettamente onesta. <em>(Isaac Asimov, Il vento è cambiato, 1983)</em></p>

"
    }
  

  
    ,{
      "title"			: "Usare i Channel per copiare file in Java",
      "link"			: "http://massimocaliman.it/java/usare-i-channel-per-copiare-file-in-java/",
      "excerpt"		: "<p>Parte della disumanità del computer sta nel fatto che, una volta programmato e messo in funzione, si comporta in maniera perfettamente onesta. <em>(Isaac Asimov, Il vento è cambiato, 1983)</em></p>

"
    }
  

  
    ,{
      "title"			: "JSF 2 forzare gli id generati dai tag",
      "link"			: "http://massimocaliman.it/java/jsf-2-forzare-gli-id-generati-dai-tag/",
      "excerpt"		: "<p>I computer sono come gli Dei del Vecchio Testamento: pieni di regole e nessuna pietà. <em>(Joseph Campbell, Il potere del mito, 1988)</em></p>

"
    }
  

  
    ,{
      "title"			: "Algoritmo di visita in ampiezza per un albero (BFS o Breadth First Search)",
      "link"			: "http://massimocaliman.it/articles/alberi-algoritmo-vistita-in-ampiezza-BFS/",
      "excerpt"		: "<p>﻿“PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil perpetrated by skilled but perverted professionals.”
<em>(Jon Ribbens)</em></p>

<p>Partiamo dal algoritmo di generico di visita e usando una coda per rappresentare <code>S</code> otteniamo visita in ampiezza (Breadth First Search o BFS).</p>

<p>I nodi vengono visitati per livelli,prima radice,poi figli della radice,poi i figli dei figli.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">proc</span> <span class="nf">BFS</span><span class="o">(</span><span class="n">nodo</span> <span class="n">r</span><span class="o">)</span>
   <span class="n">Queue</span> <span class="n">C</span>
   <span class="n">C</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="n">r</span><span class="o">)</span>
   <span class="k">while</span> <span class="n">not</span> <span class="n">C</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="k">do</span> 
       <span class="n">u</span> <span class="err">←</span> <span class="n">C</span><span class="o">.</span><span class="na">dequeue</span><span class="o">()</span>
       <span class="k">if</span> <span class="n">u</span> <span class="err">≠</span> <span class="kc">null</span> <span class="n">then</span>
           <span class="nf">visit</span><span class="o">(</span><span class="n">u</span><span class="o">)</span>
           <span class="n">C</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="n">left_child_of</span><span class="o">(</span><span class="n">u</span><span class="o">))</span>
           <span class="n">C</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="n">right_child_of</span><span class="o">(</span><span class="n">u</span><span class="o">))</span>
       <span class="n">fi</span>	
   <span class="n">od</span>
<span class="n">endproc</span></code></pre></div>

"
    }
  

  
    ,{
      "title"			: "Algoritmo di visita in profondità per un albero (DFS o Depth First Search)",
      "link"			: "http://massimocaliman.it/articles/alberi-algoritmo-vistita-in-profondita-DFS/",
      "excerpt"		: "<p>﻿”La scienza è ciò che comprendiamo abbastanza bene da spiegarla a un computer. L’arte è tutto il resto”
<em>(Donald Knuth)</em></p>

<p>Partendo dall’algoritmo generico mostrato e usando per rappresentare <code>S</code> una Pila/Stack otteniamo la visita in profondità (o DFS cioè depth first search)</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">proc</span> <span class="nf">DFS</span><span class="o">(</span><span class="n">node</span> <span class="n">r</span><span class="o">)</span>
   <span class="n">Stack</span> <span class="n">S</span>
   <span class="n">S</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">r</span><span class="o">)</span>
   <span class="k">while</span> <span class="n">not</span> <span class="n">S</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span>  <span class="k">do</span>
      <span class="n">u</span> <span class="err">←</span> <span class="n">S</span><span class="o">.</span><span class="na">pop</span><span class="o">()</span>
       <span class="k">if</span> <span class="n">u</span> <span class="err">≠</span> <span class="kc">null</span> <span class="n">then</span>
            <span class="nf">visit</span><span class="o">(</span><span class="n">u</span><span class="o">)</span>
            <span class="n">S</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">right_child_of</span><span class="o">(</span><span class="n">u</span><span class="o">))</span>
            <span class="n">S</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">left_child_of</span><span class="o">(</span><span class="n">u</span><span class="o">))</span>
       <span class="n">fi</span>
   <span class="n">od</span>
<span class="n">endproc</span></code></pre></div>

<p>in una visita in profondità si prosegue la visita dall’ultimo nodo lasciato in sospeso
poiché mettiamo in pila prima il figlio destro di ogni nodo e poi quello sinistro tenderemo a seguire tutti i figli sinistri andando in profondità fino a che non si raggiunge la prima foglia sinistra in generale si passerà a visitare ogni sotto-albero destro in un nodo solo quando il sotto-albero sinistro è stato complessivamente visitato</p>

<p>Invertendo l’ordine in cui aggiungiamo i figli abbiamo la variante simmetrica</p>

<p>La versione di visita in profondità ricorsiva mostrata sotto è molto più elegante:
la pila non appare esplicitamente nell’algoritmo in quanto è la pila di record di attivazione  delle chiamate ricorsive per mantenere i nodi aperti.</p>

<p>Esitono le ovvie varianti se alteriamo l’ordine delle istruzioni di visita e di aggiunta dei figli nella Pila S.
* visita in preordine = si visita prima la radice poi figlio sinistra e poi destra
* visita simmetrica   = si effettua prima sinistra,poi radice e poi destra
* visita in post ordine = prima sinistra,poi destra e infine radice</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">//DFS recursive visit</span>
<span class="n">proc</span> <span class="nf">DFS</span><span class="o">(</span><span class="n">node</span> <span class="n">r</span><span class="o">)</span>
     <span class="k">if</span> <span class="n">r</span> <span class="o">=</span> <span class="kc">null</span> <span class="n">then</span> <span class="k">return</span>
     <span class="nf">visit</span><span class="o">(</span><span class="n">u</span><span class="o">)</span>
     <span class="n">DFS</span><span class="o">(</span><span class="n">left_child_of</span><span class="o">(</span><span class="n">r</span><span class="o">))</span>
     <span class="n">DFS</span><span class="o">(</span><span class="n">right_child_of</span><span class="o">(</span><span class="n">r</span><span class="o">))</span>
<span class="n">endproc</span></code></pre></div>

"
    }
  

  
    ,{
      "title"			: "Algoritmo di visita generica per un albero",
      "link"			: "http://massimocaliman.it/articles/alberi-algoritmo-vistita-generico/",
      "excerpt"		: "<p>Quando qualcuno dice, “Voglio un linguaggio di programmazione nel quale ho bisogno soltanto di dire
ciò che voglio venga fatto”, dagli un lecca-lecca
<em>(Alan Perlis)</em></p>

<p>﻿Uno dei compiti più comuni da svolgere su un albero è quello di effettuare una sua visita, cioè passare in rassegna ogni suo nodo. Con il termine in linguaggio naturale “passare in rassegna” intendiamo “applicare una qualche funzione” al nodo in esame fosse anche la semplice stampa a video che esso è stato visitato.</p>

<p>Il procedimento di visita più generico possibile è visibile nell’algoritmo in pseudocodice riportato sotto</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">proc</span> <span class="nf">generic_tree_visit</span><span class="o">(</span><span class="n">node</span> <span class="n">r</span><span class="o">)</span>
   <span class="n">S</span> <span class="err">←</span> <span class="o">{</span> <span class="n">r</span> <span class="o">}</span>
   <span class="k">while</span> <span class="n">S</span> <span class="err">≠</span> <span class="err">∅</span>  <span class="k">do</span>
       <span class="n">u</span> <span class="err">←</span> <span class="n">get</span> <span class="n">node</span> <span class="n">from</span> <span class="n">S</span>
       <span class="nf">visit</span><span class="o">(</span><span class="n">u</span><span class="o">)</span>
       <span class="n">S</span> <span class="err">←</span> <span class="n">S</span> <span class="err">∪</span> <span class="o">{</span> <span class="n">children</span> <span class="n">of</span> <span class="n">u</span><span class="o">}</span>
   <span class="n">od</span>
<span class="n">endproc</span></code></pre></div>

<p>l’algortimo mantiene istante per istante in <code>S</code> i nodi che rappresentano i punti di ramificazione rimasti in sospeso e da cui la visita deve proseguire, diremo che questi nodi sono aperti e formano una frangia dell’albero, un nodo diventa chiuso quando è rimosso da <code>S</code>.</p>

<p>Rispetto ai costi in termini di spazio occupato in memoria e tempo per l’esecuzione abbiamo il teorema seguente.</p>

<p>teorema: l’algoritmo di visita generica applicato alla radice di un albero con n nodi termina in <code>O(n)</code> iterazioni e lo spazio usato è <code>O(n)</code>.</p>

<p>Ciò è evidente di per se ed è dimostrabile formalmente. La dimostrazione esula gli scopi di questo post che sono solo quelli di porre le basi a quelli successivi che ne approfondiscono gli aspetti teorici e pratici.</p>

"
    }
  

  
    ,{
      "title"			: "Alberi rappresentazioni collegate",
      "link"			: "http://massimocaliman.it/articles/alberi-rappresentazioni-collegate/",
      "excerpt"		: "<p>Proseguendo nella trattazione degli alberi normalmente si preferiscono le ﻿rappresentazioni basate su strutture collegate 
1. più flessibile di quelle idicizzate
2. modifiche alla struttura più efficienti</p>

<p>Le principali sono tre</p>

<h1 id="puntatore-ai-figli">Puntatore ai figli</h1>
<p>Se ogni nodo ha al più grado d è possibile mantenere in ogni nodo un puntatore a ciscuno dei possibili figli
Nel caso da 2 se un figlio è assente si pone il puntatore a Null Spazio richiesto O(n*d) che per d costante è O(n)</p>

<h1 id="lista-figli">Lista figli</h1>
<p>Se il numero massimo di figli non è noto a priori è possibile associare ad ogni nodo una lista di puntatori ai suoi figli questa lista può essere a sua volta rappresentata in maniera indicizzata collegata, spazio richiesto O(n) indipendentemente dal numero di figli di un nodo</p>

<h1 id="primo-figlio-fratello-successivo">Primo figlio fratello successivo</h1>
<p>Come variante alla precedente senza dover tenere la struttura dati addizionale (la lista figli)
Per ogni nodo un puntatore al primo figlio (posto a null se non ci sono figli) e un puntatore al fratello successivo</p>

<p>Spazio richiesto O(n)
Per scandire tutti i figli di un nodo basta scendere sul primo figlio e poi scandire tutti i fratelli successivi saltando di fratello in fratello.</p>

"
    }
  

  
    ,{
      "title"			: "Alberi rappresentazioni indicizzate",
      "link"			: "http://massimocaliman.it/articles/alberi-rappresentazioni-indicizzate/",
      "excerpt"		: "<p>﻿Rappresentazioni indicizzate
Basate su array vettore padri e vettori posizionali entrambe richiedono spazio O(n)</p>

<h1 id="vettori-padri">Vettori padri</h1>
<p>La più semplice
Sia T = (N,A) albero con n nodi numerati da 0 a n-1 un vettore padri è un vettore P di dim n le cui celle contengono coppie (info,parent) per ogni indice v appartenente a [0,n-1]
p[v].info è il contenuto informativo del nodo v
p[v].parent = u sse vi è un arco (u,v) in A
Se invece v è la radice p[v].parent=null
usando il vettore dei padri da ogni nodo è possibile risalire in tempo O(1) al proprio padre mentre trovare un figlio richiede una scansione dell’array in tempo O(n)</p>

<h1 id="vettore-posizionale">Vettore posizionale</h1>
<p>Nel caso particolare degli alberi d-ari completi con d&gt;=2 è possibile una rappresentazione indicizzata dove ogni nodo ha una posizione prestabilita.</p>

<p>Sia T=(N,A) albero d-ario, n nodi numerabili da 1 a n
p vettore di dimensione n  t.c. p[v] contiene l’informazione associata al nodo v e t.c l’informazione associata all’i-esimo figlio di v è in posizione p[d*v+i] per i in [0,(d-1)]</p>

<p>Per semplicità la posizione 0 dell’array non è utilizzata lo spazio richiesto per n nodi è quindi n +1</p>

<ul>
  <li>da ogni nodo v è possibile risalire in tempo O(1) sia al proprio padre (che ha indice floor ceil v/d se v diversa da radice) che a uno qualunque dei figli</li>
  <li>per ogni v nodo, l’operazione padre(v) può quindi essere realizzata in tempo costante mentre l’operazione figli(v) richiede tempo O(grado(v))</li>
</ul>

"
    }
  

  
    ,{
      "title"			: "Alberi in Java",
      "link"			: "http://massimocaliman.it/java/alberi-in-java/",
      "excerpt"		: "<p>﻿Dopo i post sulle strutture dati elementari passiamo a trattare gli alberi, prima di entrare nel dettaglio di come implementare strutture dati di questo tipo ne approfondiamo l’aspetto teorico.</p>

<p>Per prima cosa ne vediamo la definzione classica</p>

<p>Un albero (radicato) è una coppia <code>T=(N,A)</code> costituita da un insieme <code>N</code> di nodi e da un insieme <code>A</code> di archi, <code>A</code> è sottoinsieme proprio di <code>NxN</code> (cioè del prodotto cartesiano di <code>N</code> per <code>N</code>), gli archi infatti sono coppie di nodi e il concetto di arco ne modella la relazione esistente.</p>

<p>Esiste una nomenclatura piuttosto intuitiva riguardo gli Alberi</p>

<p>In un albero ogni nodo v (tranne la radice) ha un solo genitore (o padre) u tale che (u,v) appartiene ad A (l’insieme degli archi)</p>

<p>Un nodo può avere 1 o più figli v t.c. (u,v) appartiene ad A e il loro numero è detto grado</p>

<p>Con queste definizioni abbiamo già fissato alcuni concetti importanti</p>

<p>Seguono le definizioni per 
radice
foglie
nodi interni
antenati
discendenti
profondità</p>

<p>i nodi con lo stesso padre vengono detti fratelli</p>

<p>alberi con foglie tutte sullo stesso livello vengono detti alberi completi</p>

<p>Un specifica base del tipo di dati Albero deve comprendere necessariamente operazioni come quelle riportate sotto</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">tipo
   Albero
dati
   Un insieme di nodi N e uno di archi A
operazioni
   numNodi<span class="o">()</span> -&gt; intero <span class="o">(</span>restituisce il numero di nodi presenti nell’albero<span class="o">)</span>
   grado<span class="o">(</span>nodo v<span class="o">)</span>-&gt; intero <span class="o">(</span>restituisce il numero di figli del nodo v<span class="o">)</span>
   padre<span class="o">(</span>nodo v<span class="o">)</span> -&gt; nodo <span class="o">(</span>restituisce il padre del nodo v o null se v è la radice<span class="o">)</span>
   figli<span class="o">(</span>nodo v<span class="o">)</span> -&gt; &lt;nodo,nodo,...,nodo&gt; <span class="o">(</span>resitituisce uno dopo l’altro i figli del nodo v<span class="o">)</span>
   aggiungiNodo<span class="o">(</span>nodo u<span class="o">)</span> -&gt; nodo <span class="o">(</span>inserisce un nuovo nodo v come figlio di u nell’albero e lo restituisce, se v è il primo nodo 
                           ad essere inserito nell’albero esso diventa radice e u viene ignorato<span class="o">)</span>
   aggiungiSottoalbero<span class="o">(</span>Albero a,nodo u<span class="o">)</span> <span class="o">(</span>inserisce nell’albero il sottoalbero a in modo che la radice di a diventi figlia di u<span class="o">)</span>
   rimuoviSottoalbero<span class="o">(</span>nodo v<span class="o">)</span>-&gt;Albero <span class="o">(</span>stacca e restituisce l’intero sottoalbero radicato in v,
   l’operazione cancella dall’albero il nodo v e tutti i suoi discendenti<span class="o">)</span></code></pre></div>

<p>A questo punto passare dalla specifica in pseudocodice ad una in linguaggio Java è immediato.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">interface</span> <span class="nc">NodoInf</span> <span class="o">{</span>
      <span class="c1">//stuff</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">AlberoInf</span> <span class="o">{</span>
   <span class="kt">int</span> <span class="nf">numNodi</span><span class="o">();</span>
   <span class="kt">int</span> <span class="nf">grado</span><span class="o">(</span><span class="n">Nodo</span> <span class="n">v</span><span class="o">);</span>
   <span class="n">Nodo</span> <span class="nf">padre</span><span class="o">(</span><span class="n">Nodo</span> <span class="n">v</span><span class="o">);</span>
   <span class="n">List</span><span class="o">&lt;</span><span class="n">Nodo</span><span class="o">&gt;</span> <span class="nf">figli</span><span class="o">(</span><span class="n">Nodo</span> <span class="n">v</span><span class="o">);</span>
   <span class="n">Nodo</span> <span class="nf">aggiungiNodo</span><span class="o">(</span><span class="n">Nodo</span> <span class="n">u</span><span class="o">);</span>
   <span class="kt">void</span> <span class="nf">aggiungiSottoalbero</span><span class="o">(</span><span class="n">Albero</span> <span class="n">a</span><span class="o">,</span><span class="n">Nodo</span> <span class="n">u</span><span class="o">)</span> <span class="o">;</span>
   <span class="n">Albero</span> <span class="nf">rimuoviSottoalbero</span><span class="o">(</span><span class="n">Nodo</span> <span class="n">v</span><span class="o">);</span>
<span class="o">}</span></code></pre></div>

<p>Una struttura di questo tipo che non si porti dietro un certo contenuto informativo è di per se poco utile, Nodo dovrebbe infatti contenere come proprietà per esempio una chiave, un etichettà. Pensiamo ad esempio ad una struttura ad albero per rappresentare l’albero genealogico di una famigla.</p>

<p>Utilizzando i generics sarebbe infatti più interessante lavorare con classi di questo tipo
<code>Tree&lt;T&gt;</code> e <code>Node&lt;T&gt;</code>.</p>

<p>Nel JDK sono presenti implemetazioni interessanti come <code>javax.swing.tree.TreeModel</code> e <code>javax.swing.tree.TreeNode</code> utilizzata nelle Swing per la realizzazione delle GUI in ambiente desktop.</p>

<p>Esistono diverse possibili rappresentazioni per gli alberi sia basate su strutture indicizzate che collegate, quale scegliere dipende dal tipo di problemi che pensiamo di dover risolvere, se pensiamo che l’operazione più frequente o critica sia per esempio risalire ai figli di un nodo ne utilizzeremo una, se la l’operazione più critica e navigare per livelli l’albero ne utilizzeremo una ottimizzata per questo tipo di problema.</p>

"
    }
  

  
    ,{
      "title"			: "Strutture indicizzate approfondimenti",
      "link"			: "http://massimocaliman.it/articles/strutture-indicizzate-approfondimento/",
      "excerpt"		: "<p>﻿Riprendiamo il post sulle strutture indicizzate per un approfondimento.
Abbiamo visto che il <strong>Java Collection Framework</strong> ci fornisce già praticamente qualunque struttura di cui possiamo aver bisogno per il nostro lavoro. Avete mai avuto la curiosità di vedere come vengono implementate queste strutture? Il codice sorgente è pubblico, lo potete scaricare insieme al JDK ad ogni release, noterete che spesso e volentieri non vi è nulla di fantascientifico nell’implementazione di strutture come <code>ArratList</code>, per esempio la specifica di implementazione vista in pseudocodice nel post sulle strutture indicizzate precedente a questo nella sostanza non vi differisce molto. Quello che fa la differenza sono le ottimizzazioni.</p>

<p>Entriamo nel dettaglio dello pseudocodice della classe ArrayOrdinato, e vediamo come sviluppare alcune idee di implementazione reali in Java.
Lo faremo senza l’illusione di realizzare qualcosa di migliore dell’implementazione di Sun/Oracle si intende.
Le operazioni di insert e delete comprendono la fase di riallocazione dell’array, come effettuare nella realtà queste operazioni?</p>

<p>Una prima versione, un pò pedante potrebbe essere la seguente. Assumiamo per semplicità di esposizione che l’array sia di semplici <code>int</code> e non si debba gestire una tupla (elemento,chiave).</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Realloc</span> <span class="o">{</span>

    <span class="kt">int</span> <span class="n">n</span> <span class="o">;</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">S</span> <span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">Realloc</span><span class="o">(){</span>
        <span class="n">n</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
        <span class="n">S</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">S</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;S[&quot;</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="s">&quot;]=&quot;</span><span class="o">+</span><span class="n">S</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">realloc</span><span class="o">(){</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">t</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">S</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">S</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">S</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">t</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dealloc</span><span class="o">(){</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">t</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">S</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">S</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">S</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">t</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Realloc</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Realloc</span><span class="o">();</span>
        <span class="n">r</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
        <span class="n">r</span><span class="o">.</span><span class="na">S</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="mi">1</span><span class="o">;</span>
        
        <span class="n">r</span><span class="o">.</span><span class="na">realloc</span><span class="o">();</span>
        <span class="n">r</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
        <span class="n">r</span><span class="o">.</span><span class="na">dealloc</span><span class="o">();</span>
        <span class="n">r</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<p>L’effetto è quello voluto, usando un array di appoggio <code>t</code>, il metodo <code>main()</code> mostra alcune chiamate di test.</p>

<p>Possiamo utilizzare qualcosa di già pronto come <code>System.arraycopy()</code> per arrivare ad una release più compatta. Per semplicità riporto solo i metodi coinvolti nel refactoring</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">realloc</span><span class="o">(){</span>
   <span class="kt">int</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
   <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">S</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">t</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
   <span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
   <span class="n">S</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
   <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">S</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
<span class="o">}</span>
    
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">dealloc</span><span class="o">(){</span>
   <span class="kt">int</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
   <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">S</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">t</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
   <span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
   <span class="n">S</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
   <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">S</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span></code></pre></div>

<p>A guardar bene il resto dello pseudocodice rimanente è piuttosto esplicito, a basso livello per così dire, e la sua implementazione non dovrebbe rappresentare uno sforzo particolare.</p>

<p>Rimandiamo ad un post conclusivo le restanti considerazioni e implementazioni, seppur parziali, ma prima vi invito a dare un occhiata proprio al codice di <code>ArrayList</code> ed affini.</p>

"
    }
  

  
    ,{
      "title"			: "Code o Queue",
      "link"			: "http://massimocaliman.it/articles/code-o-queue/",
      "excerpt"		: "<p>﻿Riprendiamo la trattazione delle strutture dati elementari. Nei post precedenti abbiamo visto le strutture indicizzate,quelle collegate e le Pile o Stack,uno altro dei tipo base più ricorrenti è la Coda o Queue, una specifica in pseudolinguaggio è riportata sotto.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">tipo Coda
dati
una sequenza S di n elementi
operazioni
isEmpty<span class="o">()</span>-&gt;result, restituisce <span class="nb">true </span>se S è vuota, <span class="nb">false </span>altrimenti
enqueue<span class="o">(</span>elem e<span class="o">)</span>, aggiunge e come ultimo elemento di S
dequeue<span class="o">()</span>-&gt;elem, toglie da S il primo elemento e lo restituisce
first<span class="o">()</span>-&gt;elem, restituisce il primo elemento di S <span class="o">(</span>senza toglierlo da S<span class="o">)</span></code></pre></div>

<p>Una naturale implementazione in Java della specifica è fornita da un interfaccia come quella seguente</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Coda</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">enqueue</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">);</span>
    <span class="kd">public</span> <span class="n">E</span> <span class="nf">dequeue</span><span class="o">();</span>
    <span class="kd">public</span> <span class="n">E</span> <span class="nf">first</span><span class="o">();</span>
<span class="o">}</span></code></pre></div>

<p>Anche in questo caso possiamo realizzare un implementazione in vari modi, sia utilizzando strutture indicizzate che collegate.</p>

<p>Come per il gli Stack la via più naturale e veloce è quella di utilizzare le classi concrete derivanti dall’interfaccia Java <code>Deque</code>.
Anche in questo caso possiamo utilizzare i metodi di Deque relativi al suo comportamento come Queue.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">addLast</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>
<span class="n">offerLast</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>
<span class="n">removeFirst</span><span class="o">()</span>
<span class="n">pollFirst</span><span class="o">()</span>
<span class="n">getFirst</span><span class="o">()</span>
<span class="n">peekFirst</span><span class="o">()</span></code></pre></div>

<p>Un classe wrapper che renda più facile l’utilizzo è la seguente (utilizza <code>LinkedList</code> in luogo di <code>ArrayDeque</code>)</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">QueueImpl</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">enqueue</span><span class="o">(</span><span class="n">E</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">list</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="n">E</span> <span class="nf">dequeue</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">!</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>

"
    }
  

  
    ,{
      "title"			: "Pile o Stack",
      "link"			: "http://massimocaliman.it/articles/pile-o-stack/",
      "excerpt"		: "<p>﻿
Uno dei tipo base più ricorrente è la Pila o Stack, una specifica in pseudolinguaggio è riportata sotto.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">tipo: Pila
dati: una sequenza S di n elementi
operazioni
isEmpty<span class="o">()</span> -&gt; result , <span class="nv">result</span><span class="o">=</span><span class="nb">true </span>sse <span class="nv">S</span><span class="o">=</span>O, <span class="nb">false </span>altrimenti
push<span class="o">(</span>elem e<span class="o">)</span> aggiunge e come ultimo elemento di S
pop<span class="o">()</span>-&gt; elem , toglie da S l’ultimo elemento e lo restituisce
top<span class="o">()</span>-&gt;elem restituisce l’ultimo elemento di S <span class="o">(</span>senza toglierlo da S<span class="o">)</span></code></pre></div>

<p>In Java potremmo rendere la specifica come un interfaccia</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Pila</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">);</span>
    <span class="kd">public</span> <span class="n">E</span> <span class="nf">pop</span><span class="o">();</span>
    <span class="kd">public</span> <span class="n">E</span> <span class="nf">top</span><span class="o">();</span>
<span class="o">}</span></code></pre></div>

<p>L’uso dei generics mi permette di non definire l’interfaccia per un tipo specifico.</p>

<p>Anche in questo caso possiamo realizzare un implementazione in vari modi, sia utilizzando strutture indicizzate che collegate..</p>

<p>Il JDK fornisce comunque un implementazione di tutto rispetto sia per risolvere il problema degli Stack che delle Queue e lo fa con un unica interfaccia <code>Deque&lt;E&gt;</code> da cui derivano le classi concrete <code>ArrayDeque</code>, <code>ConcurrentLinkedDeque</code>, <code>LinkedBlockingDeque</code>, <code>LinkedList</code></p>

<p>Deque definisce metodi sia per realizzare uno Stack che una Queue, vi rimando al javadoc per una trattazione più esauriente e mi limito a riportarne la lista.</p>

<ul>
  <li>Per il metodo <code>push(e)</code> abbiamo <code>addFirst(e)</code></li>
  <li>Per il <code>pop()</code> abbiamo <code>removeFirst()</code></li>
  <li>Per il <code>peek()</code> o <code>top()</code> invece <code>peekFirst()</code></li>
</ul>

<p><code>Deque&lt;E&gt;</code> implementa l’interfaccia <code>Queue&lt;E&gt;</code> , interfaccia implementata anche dalle classi
<code>AbstractQueue</code>, <code>ArrayBlockingQueue</code>, <code>ArrayDeque</code>, <code>ConcurrentLinkedDeque</code>, <code>ConcurrentLinkedQueue</code>, <code>DelayQueue</code>, <code>LinkedBlockingDeque</code>, <code>LinkedBlockingQueue</code>, <code>LinkedList</code>, <code>LinkedTransferQueue</code>, <code>PriorityBlockingQueue</code>, <code>PriorityQueue</code>,<code>SynchronousQueue</code>.</p>

<p>La via più facile è utilizzare la vecchia classe <code>Stack</code> di <code>java.util</code>, ma non ne avremo grandi vantaggi, deriva dalla classe <code>Vector</code> ed è disponibile dalla versione 1.0 del JDK</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">lifo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">lifo</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
<span class="k">while</span> <span class="o">(!</span><span class="n">lifo</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">lifo</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">);</span>
<span class="o">}</span></code></pre></div>

<p>La classe consigliata è <code>ArrayDeque&lt;E&gt;</code> un semplice caso d’uso è il seguente</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayDeque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
<span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="n">Integer</span> <span class="n">value</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
<span class="kt">boolean</span> <span class="n">isEmpty</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
<span class="n">value</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span></code></pre></div>

"
    }
  

  
    ,{
      "title"			: "Strutture collegate",
      "link"			: "http://massimocaliman.it/articles/strutture-collegate/",
      "excerpt"		: "<p>﻿I costituenti di base di una struttura collegata sono i record che come le celle degli array sono numerati e contengono ciascuno una collezione di oggetti. I numeri associati ai record sono i loro indirizzi in memoria (quindi globali nell’ambito del programma e non locali come nel caso degli array)
Gli indirizzi in memoria non sono necessariamente consecutivi e sono costruiti in maniera dinamica.</p>

<p>Se un record A contiene l’indirizzo di un altro record B diremo che esiste un collegamento tra A e B realizzato tramite un puntatore.
I puntatori permettono di esplorare una struttura collegata saltando di record in record è importante che ci sia un record da cui è possibile raggiungere tutti gli altri. 
Tale record permette di inserire e cancellare agevolmente elementi. La struttura è aggiornanata tramite i puntatori (molto più sono più versatili degli array).</p>

<p>proprietà forte: è possibile aggiungere o togliere record ad una struttura collegata
proprietà debole: gli indirizzi dei record di una struttura collegata non sono necessariamente consecutivi</p>

<p>Per cancellare record se non ho già indirizzo devo però effettuare una ricerca.</p>

<p>Una specifica per questo tipo di struttura è riportata sotto</p>

<p>classe StrutturaCollegata implementa Dizionario
dati: S(n) = ThetaGrande (n)
Una collezione di n record contenenti ciascuno una quadrupla (elem,chiave,next,prev)
next e prev puntatori al successivo e al precedente record della collezione. Manteniamo inoltre un puntatore list che contiene l’indirizzo di un record se la collezione non è vuota e null altrimenti.</p>

<p>operazioni</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">insert<span class="o">(</span>elem e,chiave k<span class="o">)</span> T<span class="o">(</span>n<span class="o">)=</span>O<span class="o">(</span>1<span class="o">)</span>
1.viene creato un record p con elemento e, chiave k
2.if <span class="nv">list</span><span class="o">=</span>null <span class="k">then</span>
   p.next&lt;-p
   p.prev&lt;-p
   list&lt;-p
<span class="k">else</span> 
   si collega il record p tra list e list.next effettuando
   p.next&lt;-list.next
   list.next.prev&lt;-p
   p.prev&lt;-list
   list.next&lt;-p</code></pre></div>

<p>trattandosi di una struttura collegata doppiamente linkata (doubly linked list) in fase di implementazione si debbono tenere presenti alcuni casi limite come ad esempio cancellazione dell’unico elemento presente in lista ecc.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">delete<span class="o">(</span>chiave k<span class="o">)</span> T<span class="o">(</span>n<span class="o">)=</span>O<span class="o">(</span>n<span class="o">)</span>
1.si trova il record p con chiave k come nella search
2.si effettua
  p.prev.next&lt;-p.next <span class="o">(</span>il next del precedente di p punta al successore di p<span class="o">)</span>
  p.next.prev&lt;-p.prev <span class="o">(</span>il prev del successore di p punta a prececessore di p<span class="o">)</span>
3.si distrugge il record p</code></pre></div>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">search<span class="o">(</span>chiave k<span class="o">)</span> -&gt; elem T<span class="o">(</span>n<span class="o">)=</span>O<span class="o">(</span>n<span class="o">)</span>
<span class="k">if</span> <span class="nv">list</span> <span class="o">=</span> null <span class="k">then</span> <span class="k">return</span> null
<span class="k">else</span> 
si scandisce la struttura saltando di record in record con p&lt;-p.next fino a quando non diventa <span class="nv">p</span><span class="o">=</span>list 
verificando se qualche p ha chiave k in caso positivo si restituisce l’elemento trovato altrimenti <span class="sb">`</span>null<span class="sb">`</span></code></pre></div>

<p>Per realizzare un implementazione in Java a partire dalla specifica vista sopra come prima cosa abbiamo bisogno realizzare una classe per modellare i record, ma per farlo dobbiamo anche modellare il contenuto informativo con una classe Info o Tuple, semplifichiamo in questa prima fase di analisi e supponiamo che sia la chiave (intera) che il valore (stringa) siano attributi della classe record stessa.</p>

<p>In altre parole evitiamo di gestire qualcosa del genere</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tuple</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">K</span> <span class="n">key</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">V</span> <span class="n">value</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">Tuple</span><span class="o">()</span> <span class="o">{</span>
    
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">Tuple</span><span class="o">(</span><span class="n">K</span> <span class="n">k</span><span class="o">,</span><span class="n">V</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<p>Veniamo alla nostra classe <code>Record</code></p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Record</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">Integer</span> <span class="n">key</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="n">value</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">Record</span> <span class="n">prev</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">Record</span> <span class="n">next</span><span class="o">;</span>
<span class="o">}</span></code></pre></div>

<p>Avremmo potuto adottare già una versione generica come ad esempio</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RecordGen</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">K</span> <span class="n">key</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">V</span> <span class="n">value</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">Record</span> <span class="n">next</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">Record</span> <span class="n">prev</span><span class="o">;</span>
<span class="o">}</span></code></pre></div>

"
    }
  

  
    ,{
      "title"			: "Strutture indicizzate",
      "link"			: "http://massimocaliman.it/articles/strutture-indicizzate/",
      "excerpt"		: "<p>﻿Le strutture indicizzate sono collezioni di celle numerate che possono contenere elementi di tipo prestabilito. Assumeremo che in un array di dimensione h gli indici possano andare da 0 a h-1 o da 1 a h.</p>

<p>Normalmente si definiscono due proprietà, una comunemente detta forte l’altra debole.</p>

<p>proprietà forte: gli indici delle celle di un array sono numeri consecutivi.
proprietà debole: non è possibile aggiungere nuove celle ad un array.</p>

<p>Una possibile implementazione di un array ordinato è riportata sotto (ed è un implementazione del tipo di dato dizionario)</p>

<p>classe: ArrayOrdinato implementa Dizionario
dati: un array S di dimensione n contenente n coppie (elem,chiave) S(n) = Tetagrande(n)</p>

<p>In pratica non usiamo indici i (numerici) come  chiave ma come cella dove memorizzare la coppia (e,k)</p>

<p>Vediamo ora le operazioni comunemente definite su un dizionario</p>

<p>insert(elem e,chiave k) T(n) = O(n)</p>

<ol>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Rialloca S aumentando la dimensione n di 1 (cioè</td>
          <td>S</td>
          <td>=</td>
          <td>S</td>
          <td>+ 1 ed n = n+1)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Cerca i t.c. k&lt;=S[i].chiave (è ordinato!)</li>
  <li>Pone S[j]&lt;-S[j-1] per ogni j in [n-1,i+1] e pone S[i]&lt;-(e,k)</li>
</ol>

<p>In pratica sapendo che è ordinato basta che riallochiamo di una cella l’array,traslando il contenuto delle celle da i a n nelle nuove posizioni i+1 a n+1.</p>

<p>Identificata la posizione che deve occupare la coppia (e,k) da inserire, traslo le celle da i+1 in modo da liberare la cella i e mantenere l’ordinamento.</p>

<p>delete(chiave k) T(n)=O(n)</p>

<ol>
  <li>Trovo l’indice i della coppia con chiave k in S ovvero trovo i t.c. S[i] = (e,k) dove k è quello dato. In altri termini trovo S[i].chiave=k</li>
  <li>Pone S[j]&lt;-S[j+1] per ogni j, j in i,…,n-2</li>
  <li>Rialloca S diminuendo la dimensione di 1 (ho tolto un elemento e posso eliminare l’ultima cella dopo che ho traslato gli elementi</li>
</ol>

<p>search(chiave k) -&gt; elem T(n) = O(log n)</p>

<ol>
  <li>Esegue l’algoritmo di ricerca binaria su S per verificare se S contiene k</li>
  <li>Se trova ritorna elemento altrimenti null</li>
</ol>

<p>Nel linguaggio Java la naturale implementazione è fornita tramite gli array che possono contenere anche oggetti oltre i tipi base, quindi anche coppie o tuple del tipo <code>&lt;K,V&gt;</code> cioè coppie (chiave,valore)</p>

<p>Oltre agli array, struttura di base del linguaggio, possiamo ovviamente utilizzare le liste per esempio gli <code>ArrayList</code> che adottano propriò questo tipo di filosofia più alcuni accorgimenti atti a rendere l’implementazione più efficiente.</p>

"
    }
  

  
    ,{
      "title"			: "Usare HashMap in Java",
      "link"			: "http://massimocaliman.it/java/usare-hashmap-in-java/",
      "excerpt"		: "<p>﻿Riprendiamo da dove ci eravamo lasciati (vedi post precedente), dopo aver visto un pò di teoria sui dizionari e qualcosa sull’interfaccia <code>Map</code> passiamo a esempi pratici. Parleremo esclusivamente della classe concreta <code>HashMap</code>, la nuova, per così dire, <code>Hashtable</code>.</p>

<p>Prima di iniziare ricordiamo le differenze principali tra le due</p>

<ol>
  <li>in <code>HashMap</code> è possibile inserire valori <code>null</code>, in <code>HashTable</code> no</li>
  <li><code>HashTable</code> è sincronizzata, <code>HashMap</code> non lo è.</li>
</ol>

<p>Se ci pensate bene non sono differenze da poco, ma come vedremo non ci sono motivi per non usare sempre e comunque <code>HashMap</code> in luogo di <code>HashTable</code>.</p>

<p>Creiamo e aggiungiamo oggetti nella mappa. Usiamo i Generics e diamond inference 
Anche se obsoleta possiamo usare <code>Hashtable</code> con i generic e passarla ad un <code>HashMap</code>
ricordiamo che <code>Hashtable</code> è <code>syncronized</code>, <code>HashMap</code> non lo è.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Hashtable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hashtable</span><span class="o">&lt;&gt;();</span>
<span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HashMap</span><span class="o">(</span><span class="n">t</span><span class="o">);</span></code></pre></div>

<p>possiamo inizializzare settando il load factor (percentuale delle dimensione)  e la capacità iniziale.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HashMap</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span><span class="c1">//initialiCapacity = 10</span>
<span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HashMap</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span><span class="c1">//initialiCapacity = 10 e load factor=5%</span></code></pre></div>

<p>aggiungiamo tre elementi stringa con rispettive chiavi intere alla mappa</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Alfa&quot;</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&quot;Bravo&quot;</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&quot;Charlie&quot;</span><span class="o">);</span></code></pre></div>

<p>recuperiamo il valore da <code>HashMap</code> data la chiave</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Integer</span> <span class="n">key</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Key: &quot;</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">&quot; value: &quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span></code></pre></div>

<p>Iteratiamo sulla <code>HashMap</code></p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">keySetIterator</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">().</span><span class="na">iterator</span><span class="o">();</span>
<span class="k">while</span> <span class="o">(</span><span class="n">keySetIterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">Integer</span> <span class="n">key1</span> <span class="o">=</span> <span class="n">keySetIterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;key: &quot;</span> <span class="o">+</span> <span class="n">key1</span> <span class="o">+</span> <span class="s">&quot; value: &quot;</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key1</span><span class="o">));</span>
<span class="o">}</span></code></pre></div>

<p>ritorna le dimensioni di una <code>HashMap</code> e la svuota</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Size of Map: &quot;</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
<span class="n">map</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span> 
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Size of Map: &quot;</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">());</span></code></pre></div>

<p>controllo se contiene un dato valore o una data chiave</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Does HashMap contains 1 as key: &quot;</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Does HashMap contains Bravo as value: &quot;</span> <span class="o">+</span><span class="n">map</span><span class="o">.</span><span class="na">containsValue</span><span class="o">(</span><span class="s">&quot;Bravo&quot;</span><span class="o">));</span></code></pre></div>

<p>controllo se contiene elementi o se è vuota</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kt">boolean</span> <span class="n">isEmpty</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Is HashMap is empty: &quot;</span> <span class="o">+</span> <span class="n">isEmpty</span><span class="o">);</span></code></pre></div>

<p>rimuovo oggetti dalla mappa</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">key</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
<span class="n">value</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Following value is removed from Map: &quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span></code></pre></div>

<p>Ordinare gli elementi di una mappa.Una <code>HashMap</code> non è ordinata ne per chiave ne per valore.       <br />
ma è possibile ordinarla sia rispetto ai valori delle chiavi sia degli elementi a cui le stesse si riferiscono.
Alternativamente, puoi usare una <code>SortedMap</code> come <code>TreeMap</code>. 
<code>TreeMap</code> ha un costruttore che accetta una <code>Map</code> ed è possibile creare una mappa ordinata 
in base all’ordine naturale delle chiavi o secondo un odinamento personalizzato definito da un comparatore.
Le chiavi dovrebbe essere naturalmente comparabili e metodo  <code>compareTo()</code> non dovrebbe lanciare un’eccezione in nessun caso.              <br />
Non esiste un metodo <code>Collections.sort()</code> definita per <code>Map</code> 
è solo per liste come <code>ArrayList</code>,<code>LinkedList</code> ecc.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Unsorted HashMap: &quot;</span> <span class="o">+</span> <span class="n">map</span><span class="o">);</span>
<span class="n">TreeMap</span> <span class="n">sortedHashMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TreeMap</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Sorted HashMap: &quot;</span> <span class="o">+</span> <span class="n">sortedHashMap</span><span class="o">);</span>


<span class="n">sortedHashMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TreeMap</span><span class="o">(</span><span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">k1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">k2</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">k2</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">k1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="o">);</span>
<span class="n">sortedHashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Alfa&quot;</span><span class="o">);</span>
<span class="n">sortedHashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&quot;Bravo&quot;</span><span class="o">);</span>
<span class="n">sortedHashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&quot;Charlie&quot;</span><span class="o">);</span></code></pre></div>

<p>Stampa le chiavi dalla più grande alla più piccola</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Sorted HashMap: &quot;</span> <span class="o">+</span> <span class="n">sortedHashMap</span><span class="o">);</span></code></pre></div>

<p>Se hai necessità di rendere synchronize una <code>HashMap</code> se devi usarla in ambiente multi-threaded.
Se usi il JDK 1.5 o precedenti considera di usare <code>ConcurrentHashMap</code> in luogo di un HashMap perchè fornisce una migliore implementazione della gestione dei processi concurrenti. 
Se invece il tuo progetto è rimasto molto indietro come JDK usa <code>Hashtable</code>.
Noi useremo <code>Collections.synchronizedMap(map)</code>. 
Questo metodo ritorna una versione thread-safe di <code>Map</code></p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Map</span> <span class="n">synchronizedMap</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="n">sortedHashMap</span><span class="o">);</span>
<span class="n">Set</span> <span class="n">set</span> <span class="o">=</span> <span class="n">synchronizedMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">();</span>
<span class="kd">synchronized</span> <span class="o">(</span><span class="n">map</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">set</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">Map</span><span class="o">.</span><span class="na">Entry</span> <span class="n">me</span> <span class="o">=</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">)</span> <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">me</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span><span class="o">);</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">me</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
            <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<p>Le Java Collections Framework riserva altre piacevoli sorprese e utilità, vedremo di approfondirle nei prossimi post, come al solito se avete richieste particolari riguardo un dato argomento  (per esempio <code>WeakHashMap</code> o <code>LinkedHashMap</code>) potete contattarmi via mail.</p>

"
    }
  

  
    ,{
      "title"			: "Dizionari in Java",
      "link"			: "http://massimocaliman.it/java/dizionari-in-java/",
      "excerpt"		: "<p>Nelle vecchie release del linguaggio Java il tipo di dato dizionario veniva realizzato a partire dalla classe <code>Dictionary&lt;K,V&gt;</code> del package <code>java.util</code>. 
La classe <code>Dictionary</code> è il genitore astratto di <code>Hashtable</code>, che associa chiavi a valori. Ogni chiave e ogni valore è un oggetto. In ogni oggetto <code>Dictionary</code>, ogni chiave è associata al più ad un valore. Dato un dizionario e una chiave, si può recuperare l’elemento associato. Qualsiasi oggetto non <code>null</code> può essere utilizzato sia come una chiave che come valore. 
Di norma, il metodo <code>equals</code> deve essere implemantato da questa classe per decidere se due chiavi sono uguali.
Benchè non ancora deprecata <code>Dictionary</code> può essere considerata obsoleta ormai, in quando <code>Map</code> è l’interfaccia standard per questo tipo di collezioni di dati. <code>Dictionary</code> permane in quando da essa deriva direttamente la classe concreta <code>HashTable</code>.</p>

"
    }
  

  
    ,{
      "title"			: "Concatenare PDF con iText in Java",
      "link"			: "http://massimocaliman.it/java/concatenare-pdf-con-itext-in-java/",
      "excerpt"		: "<p>iText è sicuramente la libreria più diffusa e completa per l’elaborazione di file pdf, consiglio vivamente di darci un occhiata prima di valutare altri framework o reinventare l’acqua calda.</p>

"
    }
  

  
    ,{
      "title"			: "Scrivere e leggere file in Java 7 con try-with-resources",
      "link"			: "http://massimocaliman.it/java/scrivere-e-leggere-file-in-java-7-con-try-with-resources/",
      "excerpt"		: "<p>Leggere e scrivere file in Java 7 sfruttando il nuovo costrutto try-with-resource manleva lo sviluppatore dal compito di chiudere correttamente gli stream, sotto potete trovare due metodi di esempio.</p>

"
    }
  

  
    ,{
      "title"			: "Riguardo i limiti del calcolabile",
      "link"			: "http://massimocaliman.it/articles/riguardo-i-limiti-del-calcolabile/",
      "excerpt"		: "<p>Il seguente argomento, dovuto a L.J. Stockmeyer, è di natura puramente fisica ma
mostra in modo chiaro cosa si intenda per limiti del calcolabile:</p>

"
    }
  

  
    ,{
      "title"			: "Come ti swappo due variabili in un colpo solo con Python",
      "link"			: "http://massimocaliman.it/articles/come-ti-swappo-due-variabili-in-un-colpo-solo-con-python/",
      "excerpt"		: "<p>Vi è mai capitato di scrivere qualcosa del genere ?</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">)</span></code></pre></div>

<p>ma giusto perché se siete maniacali della leggibilità del codice e vi scrivete ogni volta un metodo swap del caso… e non amate annegare in 100+ righe di codice qualcosa come questo</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">temp</span> <span class="o">=</span> <span class="n">x</span> <span class="o">;</span>
<span class="n">x</span><span class="o">=</span> <span class="n">y</span><span class="o">;</span>
<span class="n">y</span><span class="o">=</span> <span class="n">temp</span><span class="o">;</span></code></pre></div>

<p>con Pyhton basta fare</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">,</span></code></pre></div>

<p>magico no? Il bello delle tuple.</p>

"
    }
  

  
    ,{
      "title"			: "Secure httpbase tomcat authentication",
      "link"			: "http://massimocaliman.it/articles/secure-httpbase-tomcat-authentication/",
      "excerpt"		: "<p>Per impostare l’autenticazione base in una applicazione java in tomcat possiamo intervenire solo in due file</p>

"
    }
  

  
    ,{
      "title"			: "Considerazioni sulla ricorsione",
      "link"			: "http://massimocaliman.it/articles/considerazioni-sulla-ricorsione/",
      "excerpt"		: "<p>Nei linguaggi di programmazione la ripetizione di comandi o statement viene realizzata tramite cicli, realizzati normalmente con costrutti del tipo <code>for</code>,<code>foreach</code> e <code>white</code>. Per particolari problemi la ricorsione rappresenta una valida arlternativa, più elegante, naturale  e semplice da realizzare.
Abbiamo la ricorsione quando una funzione (in Java un metodo) richiama se stesso.</p>

"
    }
  

  
    ,{
      "title"			: "﻿Una Servlet per gestire il download di file in Java",
      "link"			: "http://massimocaliman.it/java/una-servlet-per-gestire-il-download-di-file-in-java/",
      "excerpt"		: "<p>Vediamo in questo post come scrivere il codice di una Servlet Java che ci permette di effettuare il trasferimento (il download) di un file dalla nostra applicazione server al client (il web browser dei nostri utenti).
Effettuando il click su un link che punta alla nostra servlet verrà avviato il download, vediamo il codice piuttosto intuitivo nelle linee sottostanti del post.
Per la realizzazione abbiamo bisogno essenzialmente di leggere il file richiesto (usando una qualche implementazione di <code>InputStream</code> nel nostro caso useremo <code>FileInputStream</code>); di determinare il tipo <code>MIME</code> e riversare il tutto correnttamente sull’oggetto di tipo <code>HttpServletResponse</code> della nostra Servlet.</p>

"
    }
  

  
    ,{
      "title"			: "Inviare mail con allegati in Java",
      "link"			: "http://massimocaliman.it/java/inviare-mail-con-allegati-in-java/",
      "excerpt"		: "<p>Il package javax.mail è molto ricco, quindi in prima istanza può anche disorientare, vedremo nel codice presentato in questo post quanto ripaghi in flessibilità e potenzialità questa complessità. E’ vero, non ho un metodo semplice mail() come in altri linguaggi,  ma ho gli strumenti per crearmi anche un server di posta di tutto rispetto (ma questo lo approfondieremo in un prossimo post, riguardo il semplice metodo mail() possiamo anche crearcelo a partire dalle API come vedremo e sarà fatto su misura per le nostre esigenze)
Per creare la nostra utility faremo riferimento al pattern commmand.
Per prima cosa definiamo una classe astratta che conterrà la gestione mailcap sempre utile quando si vuole gestire notifiche via mail da piattaforma Java.</p>

"
    }
  

  
    ,{
      "title"			: "Il metodo String.format una printf per Java",
      "link"			: "http://massimocaliman.it/java/Il-metodo-string-format-una-printf-per-java/",
      "excerpt"		: "<p>﻿
Alla data in cui scrivo, molti non sono ancora passati nè alla versione 8 di Java nè tantomeno alla 7, per chi non lo sapesse già la versione 7 del JDK, offre il metodo</p>

"
    }
  

  
    ,{
      "title"			: "Considerazioni su alcuni Linguaggi di Programmazione Parte 4",
      "link"			: "http://massimocaliman.it/articles/considerazioni-su-alcuni-linguaggi-di-programmazione-parte-4/",
      "excerpt"		: "<p>È meglio usare programmi di alta qualità senza costi di licenza, che costosi programmi proprietari di scarso valore. 
<em>(Walter Bender, direttore del Media Lab del MIT)</em></p>

"
    }
  

  
    ,{
      "title"			: "Considerazioni su alcuni Linguaggi di Programmazione Parte 3",
      "link"			: "http://massimocaliman.it/articles/considerazioni-su-alcuni-linguaggi-di-programmazione-parte-3/",
      "excerpt"		: "<p>I bravi programmatori sanno cosa scrivere, i migliori sanno cosa riscrivere (e riusare). 
<em>(Eric Steven Raymond)</em></p>

"
    }
  

  
    ,{
      "title"			: "Considerazioni su alcuni Linguaggi di Programmazione Parte 2",
      "link"			: "http://massimocaliman.it/articles/considerazioni-su-alcuni-linguaggi-di-programmazione-parte-2/",
      "excerpt"		: "<p>Ogni buon lavoro software nasce da un problema personale di uno sviluppatore. 
<em>(Eric Steven Raymond)</em></p>

"
    }
  

  
    ,{
      "title"			: "Considerazioni su alcuni Linguaggi di Programmazione Parte 1",
      "link"			: "http://massimocaliman.it/articles/considerazioni-su-alcuni-linguaggi-di-programmazione-parte-1/",
      "excerpt"		: "<p>Mai fidarsi di un computer che non è possibile gettare dalla finestra. 
<em>(Steve Wozniak)</em></p>

"
    }
  

  
    ,{
      "title"			: "La gestione delle stringhe in Java",
      "link"			: "http://massimocaliman.it/java/la-gestione-delle-stringhe-in-java/",
      "excerpt"		: "<p>L’ingegnere quantistico Seth Lloyd è convinto che l’universo sia un gigantesco computer. Speriamo non faccia girare Windows. <em>(Kevin Kelly)</em></p>

"
    }
  

  
    ,{
      "title"			: "Il cms è morto viva jekyll!",
      "link"			: "http://massimocaliman.it/articles/il-cms-e-morto-viva-jekyll/",
      "excerpt"		: "<p>Il test di un programma può essere usato per mostrare la presenza di bug, ma mai per mostrare la loro assenza.
<em>(Edsger Dijkstra, Structured Programming, 1972)</em></p>

"
    }
  

  
    ,{
      "title"			: "Installare Jekyll su ubuntu 14.04.",
      "link"			: "http://massimocaliman.it/articles/install-jekyll/",
      "excerpt"		: "<p>Per gli hacker un computer significa anche intrattenimento. Non i giochi, non le belle immagini sulla Rete. Il computer in sé è intrattenimento.
<em>(Linus Torvalds, in Pekka Himanen, L’etica hacker e lo spirito dell’età dell’informazione, 2001)</em></p>

"
    }
  

  
    ,{
      "title"			: "Effettuare la login SSH senza digitare la password.",
      "link"			: "http://massimocaliman.it/articles/Effettuare-la-login-ssh-senza-digitare-la-password/",
      "excerpt"		: "<p>Se si vuole usare <code>Linux</code> e <code>OpenSSH</code> per automatizzare delle attività e si ha la necessità di poter effettuare la login automatica dal un host <code>A</code> con utente <code>a</code> ad un host <code>B</code> con utente <code>b</code> senza inserire nessuna password questi sono i passo necessari:</p>

"
    }
  

  
    ,{
      "title"			: "GlassFish V3: la console amministrazione prendendo troppo tempo per caricare.",
      "link"			: "http://massimocaliman.it/articles/glassfish-v3-console-amministrazione-prendendo-troppo-tempo-per-caricare/",
      "excerpt"		: "<p>Chiedersi se un computer possa pensare non è più interessante del chiedersi se un sottomarino possa nuotare.
<em>(Edsger Dijkstra, The threats to computing science, 1984)</em></p>

"
    }
  

  
    ,{
      "title"			: "HOWTO FIX errore 'illegal pattern character g' JAXB in NetBeans .",
      "link"			: "http://massimocaliman.it/java/howto-fix-error-jaxb-netbeans-illegal-pattern-character-g/",
      "excerpt"		: "<p>Il computer non è una macchina intelligente che aiuta le persone stupide, anzi è una macchina stupida che funziona solo nelle mani delle persone intelligenti.
<em>(Umberto Eco, Come scrivere una tesi di laurea con il personal computer, 1986 (prefazione))</em></p>

"
    }
  

  
    ,{
      "title"			: "Come trovare il jar dove è contenuta una determinata classe (deployed in GlassFish).",
      "link"			: "http://massimocaliman.it/java/come-trovare-il-jar-dove-e-contenuta-una-determinata-classe/",
      "excerpt"		: "<p>I Greci dicevano di una persona incolta: “Non sa leggere né nuotare”; oggi bisognerebbe aggiungere: “né usare un elaboratore”.
<em>(Primo Levi e Tullio Regge, Dialogo, 1984)</em></p>

"
    }
  

  
    ,{
      "title"			: "Come impostare Virtualbox a schermo intero su Ubuntu 14.04",
      "link"			: "http://massimocaliman.it/articles/come-impostare-virtualbox-a-schermo-intero-su-ubuntu-1404/",
      "excerpt"		: "<p>I computer sono come gli Dei del Vecchio Testamento: pieni di regole e nessuna pietà.
<em>(Joseph Campbell, Il potere del mito, 1988)</em></p>

"
    }
  

  
    ,{
      "title"			: "Pubblicare un sito con GitHub Pages.",
      "link"			: "http://massimocaliman.it/articles/pubblicare-un-sito-con-github-pages/",
      "excerpt"		: "<p>L’informatica non riguarda i computer più di quanto l’astronomia riguardi i telescopi.
<em>(Edsger Dijkstra)</em></p>

"
    }
  

  
    ,{
      "title"			: "Come installare Ant su linux",
      "link"			: "http://massimocaliman.it/articles/come-installare-ant-su-linux/",
      "excerpt"		: "<p>Non provare mai a spiegare il computer a un profano. È più facile spiegare il sesso a una vergine.
<em>(Robert Anson Heinlein, La Luna è una severa maestra, 1966)</em></p>

"
    }
  

  
    ,{
      "title"			: "Creare e configurare un DataSource MySQL in GlassFish Application Server",
      "link"			: "http://massimocaliman.it/articles/creare-e-configurare-un-dataSource-mysql-in-glassfish-application-server/",
      "excerpt"		: "<p>Mentre in fisica devi capire come è fatto il mondo, in informatica sei tu a crearlo. Dentro i confini del computer, sei tu il creatore. Controlli – almeno potenzialmente – tutto ciò che vi succede. Se sei abbastanza bravo, puoi essere un Dio. Su piccola scala.
<em>(Linus Torvalds, Rivoluzionario per caso, 2001)</em></p>

"
    }
  

  
    ,{
      "title"			: "BPEL (Business Process Execution Language)",
      "link"			: "http://massimocaliman.it/articles/bpel/",
      "excerpt"		: "<p>I computer sono incredibilmente veloci, accurati e stupidi. Gli uomini sono incredibilmente lenti, inaccurati e intelligenti. L’insieme dei due costituisce una forza incalcolabile.
<em>(Albert Einstein (attribuito))</em></p>

"
    }
  

  
    ,{
      "title"			: "Javascript secondo Peter Paul Kock (PPK)",
      "link"			: "http://massimocaliman.it/articles/javascript-secondo-peter-paul-kock-PPK/",
      "excerpt"		: "<p>Se vi capita di dover lavorare in javascript, anche solo per copiare e incollare semplici script nel vostro sito fatevi un regalo,
comprate e leggete “Java Script secondo Peter-Paul Kock” (Pearson Education) traduzione di PPK ON JAVASCRIPT.
Uno dei pochi libri su javascript che non sia un reference o una semplice raccolta di banali script.
Per chi non lo sapesse Peter Paul Kock conosciuto meglio come PPK è uno dei più autorevoli esperti di fama mondiale su Javascript, 
il sito www.quirksmode.org che molti conoscono è una sua creazione, penso sia online da una decina di anni.
Nel libro non troverete una raccolta di semplici script di esempio,didattici, di quelli che ormai si copiano ovunque, ma casi reali,per cui l’autore è stato pagato,
si spiega come debuggare uno script,come usare le tecniche più avanzate e come evitare il più possibile i problemi di incompatibilità tra i vari browser.</p>

"
    }
  

  
    ,{
      "title"			: "Uso di keytool e jarsigner",
      "link"			: "http://massimocaliman.it/java/uso-di-keytool-e-jarsigner/",
      "excerpt"		: "<p>Per estrarre un certificato che già sappiamo essere nel nostro portachiavi</p>

"
    }
  

  
    ,{
      "title"			: "Errori comuni nella configurazione di Adobe PDF iFilter per SharePoint 2007",
      "link"			: "http://massimocaliman.it/articles/errori-comuni-nella-configurazione-di-adobe-pdf-ifilter-per-sharepoint-2007/",
      "excerpt"		: "<p>Un errore comune in cui si può incorrere nell’installare iFilter per SharePoint 2007 è quello di dimenticare di sostituire il valore della chiave</p>

"
    }
  

  
    ,{
      "title"			: "Well Formatted riferito ad un documento XML",
      "link"			: "http://massimocaliman.it/articles/well-formatted-riferito-ad-un-documento-xml/",
      "excerpt"		: "<p>Con well formatted si intende in senso letterario “ben formattato”, un documento XML che segue le la sintassi elementare di un documento XML.</p>

"
    }
  

  
    ,{
      "title"			: "Quel maledetto Content is not allowed in prolog",
      "link"			: "http://massimocaliman.it/articles/quel-maledetto-content-is-not-allowed-in-prolog/",
      "excerpt"		: "<p>Ogni documento XML su cui lavoriamo dovrebbe essere formattato correttamente, salvato con il giusto encoding ecc.
Un caso classico è il messaggio “Content is not allowed in prolog” (<code>SAXParseException</code>)
Editiamo a mano il file con un editor (esadecimale) e togliamo in testa “ef bb bf”.
Visto che usiamo Java molto meglio mettere un piccolo work-around di appena due righe di codice :</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="o">(</span><span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;^([\\W]+)&lt;&quot;</span><span class="o">)).</span><span class="na">matcher</span><span class="o">(</span> <span class="n">xmlString</span><span class="o">.</span><span class="na">trim</span><span class="o">()</span> <span class="o">);</span>
<span class="n">xmlString</span> <span class="o">=</span> <span class="n">matcher</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">&quot;&lt;&quot;</span><span class="o">);</span></code></pre></div>

"
    }
  

  
    ,{
      "title"			: "Cose'è JAX-WS",
      "link"			: "http://massimocaliman.it/java/cose-e-jax-ws/",
      "excerpt"		: "<p>JAX-WS sta per Java API for XML Web Services.
JAX-WS fa parte della piattaforma Java EE di Sun Microsystems (ora Oracle). Come altre API di Java EE usa le annotazioni, introdotto in Java SE 5, per semplificare lo sviluppo e la distribuzione di client di servizi web.
L’implementazione di riferimento di JAX-WS è sviluppata come open source e fa parte del progetto GlassFish, application server Java EE open source.
Potete trovare altre informazioni http://jax-ws.java.net</p>

"
    }
  

  
    ,{
      "title"			: "Installiamo mysql senza synaptic o apt",
      "link"			: "http://massimocaliman.it/articles/installiamo-mysql-senza-synaptic-o-apt/",
      "excerpt"		: "<p>Scarichiamo il tar.gz dal sito di mysql www.mysql.com
posizioniamolo in /usr/local scompattiamo il tar.gz con il comando</p>

"
    }
  

  
    ,{
      "title"			: "Estrarre dati dal codice fiscale con Excel",
      "link"			: "http://massimocaliman.it/articles/estrarre-dati-dal-codice-fiscale-con-excel/",
      "excerpt"		: "<p>Assumiamo che il nostro codice fiscale sia contenuto nella cella A1.</p>

"
    }
  

  
    ,{
      "title"			: "Come velocizzare le operazioni di restore da dump sql di mysql",
      "link"			: "http://massimocaliman.it/articles/come-velocizzare-le-operazioni-di-restore-da-dump-sql-di-mysql/",
      "excerpt"		: "<p>Per velocizzare le operazioni di restore di un dump sql in mysql è possibile procedere come riportato sotto</p>

"
    }
  

  
    ,{
      "title"			: "Problema in fase di restore di un database mysql",
      "link"			: "http://massimocaliman.it/articles/problema-in-fase-di-restore-di-un-database-mysql/",
      "excerpt"		: "<p>Se vi capita di avere problemi in fase di restore da un dump mysql provate a impostare queste variabili prima di lanciare il comando source</p>

"
    }
  

  
    ,{
      "title"			: "Importazione utenti,corsi,utenti e corsi con I/O Task in Docebo",
      "link"			: "http://massimocaliman.it/articles/importazione-utenti-corsi-utenti-e-corsi-con-iotask-in-docebo/",
      "excerpt"		: "<p>Chi ha necessità di importare utenti,corsi,associazioni tra utenti-corsi in maniera automatica e schedulata avrà necessariamente avuto a che fare con gli I/O Task.
La schedulazione è subordinata alle impostazioni temporali nel pannello di amministrazione I/O Task e al lancio di una url particolare da cron. 
Per la versione in esame (3.6.0.3) non è possibile lanciare nuovamente un task (giornaliero) qualora non fosse andato a buon fine,o semplicemente, se fosse necessario iterarlo nuovamente. Il task viene marcato come eseguito. 
Una delle possibilità per poterlo rieseguire è modificare il campo <strong>last_execution</strong> della tabella <strong>core_taskportando</strong> la data a quella del giorno precedente.
Il comportamento è evidente analizzando i sorgenti</p>

"
    }
  

  
    ,{
      "title"			: "Come ripristinare l'utente amministratore di Docebo",
      "link"			: "http://massimocaliman.it/articles/come-ripristinare-l-utente-%20amministratore-di-%20docebo/",
      "excerpt"		: "<p>In fase di importazione da file <strong>CSV</strong>, <strong>Docebo</strong> talvolta cancella l’utente admin e non è più possibile accedere al pannello di amministrazione.
Il bug a quanto pare è noto fin dal 2005, ne ho trovato riscontro in rete e su vari forum e gruppi di discussione. 
Al momento non ho individuato patch ufficiali che risolvano il problema,uno dei consigli che ho spesso trovato è quello di ripristinare un backup del database. Una soluzione indolore è ripristinare l’utente admin con le istruzioni che riporto qui sotto.</p>

"
    }
  

  
    ,{
      "title"			: "Workshop Tecnologie e Professionalità per la SOA",
      "link"			: "http://massimocaliman.it/articles/workshop-tecnologie-e-professionalita-per-soa/",
      "excerpt"		: "<p>Il 30 settembre scorso (30/09/2008) si è tenuto presso la sede di Confindustria Genova il workshop “Tecnologie e Professionalità per la SOA”.
L’incontro aveva lo scopo di illustrare lo stato dell’arte della SOA presentandone le principali caratteristiche tecniche e modalità di utilizzo.
La presentazione di una soluzione di mercato e delle sue applicazioni per chiudere con l’evidenziazione delle professioni richieste per l’implementazione di una SOA secondo lo standard EUCIP.
Ho particolarmente apprezzato le relazioni del Prof.Egidio Astesiano “Andare SOA:fra imperativo e realtà” e dell’Ing.Andrea Rinaldi,
Direttore Tecnico per i prodotti Gestionali di Microarea “Un ERP SOA-oriented:due casi di successo”.
La SOA, Service Oriented Architecture, può essere definita come uno stile architetturale ICT che supporta,integrandoli,i processi di business tra loro interoperanti.
Vi segnalo alcuni link interessanti presentati durante i vari interventi
<a href="http://www.ctiliguria.it">http://www.ctiliguria.it</a>
Il sito OASIS (OASIS is a not-for-profit consortium that drives the development, convergence and adoption of open standards for the global information society)
http://www.omg.org/docs/ad/08-08-04.pdf
Service oriented architecture Modeling Language (SoaML) - Specification for the UML Profile and Metamodel for Services (UPMS)
http://www.ctiliguria.it/
Il sito del CTI Liguria (Club per le tecnologie dell’informazione - Liguria)
http://www.aicanet.it/
Il sito di AICA (AICA - Associazione Italiana per l’Informatica ed il Calcolo Automatico)
http://aicanet.net/soci/il-cantiere-dei-mestieri-ict/il-cantiere-dei-mestieri-ict
Il Cantiere dei Mestieri ICT (insieme di servizi messi a disposizione da AICA per fornire via web ai propri Soci informazioni riguardanti la loro attività professionale) 
http://www.infoq.com/zones/centrasite/
CentraSite (The CentraSite Community is a portal for all things SOA and SOA Governance related, many of which are linked to CentraSite, the industry-leading SOA registry and repository, co-developed by Software AG and Fujitsu.)
http://www.quasar.it/filedocumenti/microarea/magic%20link_wp_25.pdf
http://www.columbusinformatica.it/upload/MagicLink.pdf
(fonte Google) Informazioni sulla soluzione SOA-oriented “Magic Link” di Microarea (presentata dall’Ing.Rinaldi, dategli un occchiata ne vale la pena)
http://www.microarea.it/Microarea.IT/default.aspx
Il sito di Microarea S.p.A</p>

"
    }
  

  
    ,{
      "title"			: "Gli oggetti in Java",
      "link"			: "http://massimocaliman.it/java/gli-oggetti-in-java/",
      "excerpt"		: "<p>Da ogni classe  possibile ottenere mediante l’ istanzanziazione una o pi entit, ciascuna delle quali costituisce una 
copia della struttura dati descritta dalla classe nelle sue componenti dinamiche e di cui condivide i metodi di accesso alle informazioni.</p>

"
    }
  

  
    ,{
      "title"			: "La parola riservata this in Java",
      "link"			: "http://massimocaliman.it/java/la-parola-riservata-this-in-java/",
      "excerpt"		: "<p>E’ possibile riscontrare due situazioni di interesse legate all’uso dei metodi la cui accurata gestione permette di migliorare 
l’efficienza del codice:</p>

"
    }
  

  
    ,{
      "title"			: "Linux: il comando du",
      "link"			: "http://massimocaliman.it/articles/linux-il-comando-du/",
      "excerpt"		: "<p>il comando “du” mostra lo spazio disco usato.
Uso:
du -s -h .
Dove:
“-s” indica –summarise display only a total for each argument.
“-h” indica –human-readable print sizes in human readable format (e.g., 1K 234M 2G).
“.” indica di applicare alla directory corrente.
Esempio:
mcaliman@deimos:~# du -s -h .</p>

"
    }
  

  
    ,{
      "title"			: "Il passaggio di parametri in Java",
      "link"			: "http://massimocaliman.it/java/il-passaggio-di-parametri-in-java/",
      "excerpt"		: "<p>Nella forma pi generica un metodo  caratterizzato da uno o pi parametri formali</p>

"
    }
  

  
    ,{
      "title"			: "Approfondiamo i metodi in Java",
      "link"			: "http://massimocaliman.it/java/approfondiamo-i-metodi-in-java/",
      "excerpt"		: "<h1 id="definizione-dei-metodi">Definizione dei metodi</h1>

"
    }
  

  
    ,{
      "title"			: "Classi e metodi in Java",
      "link"			: "http://massimocaliman.it/java/classi-e-metodi-in-java/",
      "excerpt"		: "<p>Classi e metodi costituiscono le componenti di base della programmazione ad oggetti alla quale forniscono gli 
elementi di incapsulamento e di limitazione di accesso ai dati.</p>

"
    }
  

  
    ,{
      "title"			: "Introduzione alla OOP in Java",
      "link"			: "http://massimocaliman.it/java/introduzione-alla-oop-in-java/",
      "excerpt"		: "<p>La programmazione nei linguaggi orientati agli oggetti (<strong>Object Oriented Programming</strong> o più semplicemente <strong>OOP</strong>) 
si basa su tipologie di entità denominate classi ed oggetti. Java è un linguaggio OOP.</p>

"
    }
  

  
    ,{
      "title"			: "Le variabili array in Java",
      "link"			: "http://massimocaliman.it/java/le-variabili-array-in-java/",
      "excerpt"		: "<p>Gli array sono disponibili nella maggior parte dei linguaggi di programmazione perchè realizzano 
la più semplice organizzazione di strutture dati complesse.</p>

"
    }
  

  
    ,{
      "title"			: "Le costanti simboliche in Java",
      "link"			: "http://massimocaliman.it/java/le-costanti-simboliche-in-java/",
      "excerpt"		: "<p>Una variabile che non cambia mai valore è di fatto una costante, si può in java esplicitare un vincolo a tale condizione di immutabilità
tramite la parola chiave <strong>final</strong>.</p>

"
    }
  

  
    ,{
      "title"			: "Le variabili e i comandi di assegnazione",
      "link"			: "http://massimocaliman.it/java/le-variabili-e%20i-comandi-di-assegnazione-in-java/",
      "excerpt"		: "<p>Diamo per prima cosa una definizione sufficientemente formale per i nostri scopi di variabile:
Definizione di variabile
Una variabile  una coppia composta da un nome, l’identificativo della variabile e un valore.</p>

"
    }
  

  
    ,{
      "title"			: "Le feature del linguaggio Java che devi conoscere",
      "link"			: "http://massimocaliman.it/java/le-feature-del-linguaggio-java-che-devi-conoscere/",
      "excerpt"		: "<p>Se vuoi che Java diventi il tuo linguaggio di programmazione principale
i seguenti aspetti dovranno diventarti familiari, sono aspetti comuni in qualunque linguaggio di programmazione.</p>

"
    }
  

  
    ,{
      "title"			: "Java e il protocollo UDP",
      "link"			: "http://massimocaliman.it/java/mokabyte-udp/",
      "excerpt"		: "<p>Introduzione ad uno dei protocolli piu’ utilizzati in internet, lo User Datagram Protocol,
publicato su <strong>MokaByte Numero 39,Marzo 2000,di Massimo Caliman e Nicola Merello</strong></p>

<p>Nonostante che l’importanza di Java stia crescendo e che l’ interesse nei confronti del Networking sia
sempre maggiore, la programmazione di rete in Java è ancora per molti aspetti oscura.
Eppure è molto semplice, in questo articolo ci concentreremo su tutto cio’ che ha che fare con il
protocollo UDP e le classi Java.</p>

<h1 id="introduzione">Introduzione</h1>
<p>Spesso si preferisce ancora scrivere applicazioni di questo tipo ancora in C/C++ (e in alcuni casi
limitati, questo è effettivamente consigliabile) ma si può farlo benissimo anche in Java ed è più facile e
veloce.</p>

<p>Per affrontare questo articolo, non è necessario essere specialisti della rete, una conoscenza dei concetti
basilari della rete e’ comunque richiesta, dato che si fara’ riferimento ai termini piu’ comuni che si
incontrano quando ci si avventura in questa branca della programmazione.</p>

<p>Cominciamo con una note dolente : la rete e’ l’area meno supportata dalla maggior parte delle
implementazioni Java, non ci sono errori rilevanti relativi al Networking ma, se si puo’ scegliere
l’implementazione e quindi la piattaforma, e’ meglio optare per quella della Sun per Solaris.
A questo punto il lettore potrebbe, assalito da qualche dubbio, chiedersi perche’ dovrebbe avventurasi
nella programmazione di rete in Java. Basta dare uno sguardo alla lista delle classi che il linguaggio offre
per trattare problematiche di rete per rispondere a questa domanda.</p>

<p>Java (in particolare il package java.net) fornisce delle ottime astrazioni alle problematiche di rete e non
bisogna essere dei guru della rete. Attenzione pero’, Java attualmente conosce le reti basate su sistemi IP,
quindi altre (minori) architetture rimangono fuori ma non e’ assolutamente un problema, dato che ormai IP oltre
a essere lo standard di Internet (quello con la I maiuscola, la grande rete) sta ormai per divenire anche
quello delle piccole internet aziendali..
In rete i dati viaggiano per mezzo di pacchetti chiamati datagram. Nelle reti IP ogni datagramma contiene
un intestazione lunga dai 20byte ai 60 byte ed un insieme di dati che contiene fino a 65.515byte.</p>

<h1 id="luser-datagram-protocol-ovvero-udp">L’User Datagram Protocol ovvero UDP</h1>

<p>UDP (User Datagram Protocol )e’ un protocollo di trasporto semplice, senza connessione, che si basa sul
trasferimento di datagrammi. Potete trovare la sua descrizione completa nel documento <code>RFC768</code> . Qui ne daremo
solo una breve descrizione per poter cominciare subito a sperimentare con le classi Java . Ogni operazione di
output di un processo che usa il trasporto UDP produce un datagramma UDP, che viene Viene incapsulato in un
datagramma IP I protocollo UDP non e’ affidabile: invia i datagrammi ma non garantisce che arrivino a
destinazione sono quindi gli applicativi che lo utilizzano che devono preoccuparsi dell’affidabilita’ del
servizio. La testata UDP e’ relativamente semplice.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="mi">0</span>       <span class="mi">7</span> <span class="mi">8</span>     <span class="mi">15</span> <span class="mi">16</span>    <span class="mi">23</span> <span class="mi">24</span>      <span class="mi">31</span> 
<span class="o">+--------+--------+--------+--------+</span> 
<span class="o">|</span> <span class="n">Source</span> <span class="o">|</span> <span class="n">Destination</span>              <span class="o">|</span> 
<span class="o">|</span> <span class="n">Port</span>   <span class="o">|</span> <span class="n">Port</span>                     <span class="o">|</span> 
<span class="o">+--------+--------+--------+--------+</span> 
<span class="o">|</span>        <span class="o">|</span>                          <span class="o">|</span> 
<span class="o">|</span> <span class="n">Length</span> <span class="o">|</span> <span class="n">Checksum</span>                 <span class="o">|</span> 
<span class="o">+--------+--------+--------+--------+</span> 
<span class="o">|</span> 
<span class="o">|</span> <span class="n">data</span> <span class="n">octets</span> <span class="o">...</span> 
<span class="o">+----------------</span> <span class="o">...</span></code></pre></div>

<h1 id="user-datagram-header-format">User Datagram Header Format</h1>
<p>I campi Source Porte e Destination Port sono ovviamente la sorgente e la destinazione del pacchetto. Il
campo Length e’ la lunghezza dell’intero datagramma UDP (testata + dati) in byte. Il valore minimo e’ 8, ma in
realta’ questo campo non viene gestito dal protocollo, il quale sa che la lunghezza totale e’ la lunghezza di
un datagramma IP meno i 20 byte della testata IP. Il campo Checksum e’ opzionale. Il checksum e’ un campo di
controllo end-to-end: e’ calcolato dal mittente e verificato dal ricevitore del pacchetto. Se il pacchetto UDP
e’ errato, viene scartato silenziosamente, senza generazione di messaggi d’errore. L’opzionalita’ dei checksum
di UDP implica una velocita’ maggiore delle operazioni se disabilitata, ma puo’ naturalmente fornire sorgenti
irrecuperabili di errori, specie su una rete non Ethernet o quando il datagramma UDP transiti da router.</p>

<h1 id="casi-duso-del-protocollo-udp">Casi d’uso del protocollo UDP</h1>
<p>Se si lavora nel campo dell’ integrazione di dispositivi per la rilevazione di campo e computer (ad esempio
sensori di temperatura o piu’ generici rilevatori di campo, da quelli classici per le tessere badge ai piu’
recenti di impronte digitali) ci si trovera’ molto probabilmente a dover utilizzare il protocollo UDP. Perche’
il protocollo UDP e non il piu’ affidabile TCP/IP o addirittura http (cosi magari tiriamo in ballo le Servlet)? 
Perche’ il protocollo UDP e’ piu’ facile da implementare a livello di firmware, quindi costa meno ai
costruttori in termini di sviluppo ecc.</p>

<h1 id="ed-e-gia-udp">Ed e’ gia UDP</h1>
<p>UDP e’ il cugino povero di TCP, molto veloce ma poco affidabile. Quando lo usiamo per inviare dei dati non
possiamo in nessun modo sapere se sono arrivati, ne se sono arrivati nell’ordine nel quale sono partiti. Dove
si usa UDP ? Si puo’ usare per implementare un protocollo di trasferimento file come ad esempio NSF (Network
File System, la sua ultima versione puo’ usare sia TCP che UDP), TFTP (Trivial FTP) ed altri (il multicasting
si affida a UDP per la sperimentazione). Con UDP e’ l’applicazione che si deve preoccupare della affidabilita’,
prendendosi cura dei pacchetti mancanti o fuori sequenza cio’ significa molto lavoro, si puo’ fare ma prima e’
conveniente pensare se si poteva usare TCP. Le classi fondamentali che si devono conoscere con UDP sono
DatagramPacket e DatagramSocket. Il package e’ sempre il solito java.net, che e’ stato trattato piu’ che bene
sia su Mokabyte che in molti testi, ma attenzione ci sono differenze (delle modifiche) tra la sua
implementazione dal JDK1.1 al JDK1.2. Chi utilizza il Jbuilder3 della Imprise per lo sviluppo puo’ andare nell’
help in linea alla sezione Networking Features e poi selezionare Change in JDK 1.1.</p>

<h1 id="finalmente-un-po-di-codice">Finalmente un po’ di codice!</h1>
<p>E’ adesso cominciamo a scrivere un po’ di codice (chissa’ perche’ noi programmatori abbiamo sempre fretta
di cominciare a massacrare le nostre tastiere). Supponiamo di avere una personal collegato in rete ad uno di
questi dispositivi ambientali, dobbiamo aprire un socket sulla stessa porta sulla quale il dispositivo e’ in
ascolto :</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="n">DatagramSocket</span> <span class="n">serverSocket</span> <span class="o">;</span> 
<span class="kd">private</span> <span class="kt">int</span> <span class="n">serverPort</span> <span class="o">;</span> <span class="n">serverSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DatagramSocket</span><span class="o">(</span><span class="n">serverPort</span><span class="o">)</span> <span class="o">;</span></code></pre></div>

<p>Ora che abbiamo il nostro oggetto socket per l’UDP (notare che si utilizza per questa ragione un
DatagramSocket) Settiamo il timeout a 5 secondi, da notare che il timeout di default varia da browser a browser
se si decide di usare delle Applet, invece con le applicazioni ,che consiglio, le cose sono piu’ facili.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">serverSocket</span><span class="o">.</span><span class="na">setSoTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span> <span class="o">;</span></code></pre></div>

<p>Adesso supponiamo di voler spedire un segnale al nostro dispositivo (ad esempio il classico segnale di
inizializzazione) per fare questo dobbiamo costruire un oggetto di tipo DatagramPacket. A tale scopo usiamo il
costruttore di cui useremo la seguente versione (vedremo poi nell’approfondimento perche’)</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">DatagramPacket</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">,</span> <span class="n">InetAddress</span> <span class="n">address</span><span class="o">,</span> <span class="kt">int</span> <span class="n">port</span><span class="o">)</span> 
<span class="n">DatagramPacket</span> <span class="n">packet</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DatagramPacket</span><span class="o">(</span><span class="n">data</span><span class="o">,</span><span class="n">data</span><span class="o">.</span><span class="na">length</span><span class="o">,</span><span class="n">address</span><span class="o">,</span> <span class="n">serverPort</span><span class="o">);</span></code></pre></div>

<p>Quindi inviamolo al nostro dispositivo</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">serverSocket</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">packet</span><span class="o">);</span></code></pre></div>

<p>A questo punto, direi che la prossima cosa da fare e’ aspettare il segnale di ritorno dal nostro
dispositivo, che dovrebbe essere un echo nel migliore dei casi, un messaggio di errore o altro, dipende dal
dispositivo e dell’ architettura del sistema scelto permettendo.</p>

<p>Creiamo il DatagramPacket vuoto che conterra’ il pacchetto ritornato, ricordandoci che il protocollo UDP
non e’ sicuro, e quindi spetta a noi (qualora sia possibile, e non sempre lo e’) gestire a livello software un
eventuale sistema di controllo degli errori.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">DatagramPacket</span> <span class="n">packet</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DatagramPacket</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">512</span><span class="o">],</span><span class="mi">512</span><span class="o">);</span></code></pre></div>

<p>Per metterci in ascolto sul socket utilizziamo il metodo receice, che e’ bloccante, cio’ blocca il flusso
del programma finche’ non riceve un pacchetto o scade il timeout, sollevando un eccezione.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="k">try</span> <span class="o">{</span> 
   <span class="n">serverSocket</span><span class="o">.</span><span class="na">receive</span><span class="o">(</span><span class="n">packet</span><span class="o">);</span> 
<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">InterruptedIOException</span> <span class="n">e</span><span class="o">){</span>
    <span class="c1">// gestiamo il timeout </span>
<span class="o">}</span></code></pre></div>

<p>Infine e’ sempre buona norma rimettere le cose al loro posto prima di chiudere l’applicazione, che tradotto
significa che dobbiamo chiudere il socket con il metodo close.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">serverSocket</span><span class="o">.</span><span class="na">close</span><span class="o">()</span> <span class="o">;</span></code></pre></div>

<p>Abbiamo visto come sia relativamente facile lavorare con UDP e Java, ben inteso l’argomento e’ ben piu’
esteso, ma al contrario del piu’ diffuso e sicuro TCP/IP, bisogna tagliare le soluzioni su misura, di caso in
caso, con un occhio di riguardo ai dispositivi con cui si deve colloquiare. Infatti essi dettano le regole del
gioco e lo fanno a proprio vantaggio, o meglio questo e’ quello che fanno i loro costruttori. Un ultima nota
prima di passare all’approfondimento : cercate di non disseminare di oggetti DatagramPacket le vostre
applicazioni, progettate sempre classi wrapper, vi rendera’ molto piu’ facile la vita quando dovrete fare i
conti con qualche classe deprecata o qualche baco della liberia, inoltre fate sempre dei test conoscitivi in
modo da sapere prima come si comporta la vostra implementazione di UDP su sistemi operativi diversi come NT,
quando ad esempio la JVM va in crash ma il socket non ne vuole sapere di chiudersi e altre sorpresine di mamma
Sun.</p>

<h1 id="lapprofondimento">L’approfondimento</h1>
<p>Dopo gli stralci di codice visti sopra, cerchiamo un approccio piu’ ragionato e sistematico a quanto ci e’
dato da Java per implementare UDP. Cominciamo con la classe <code>DatagramPacket</code> : <code>DatagramPacket</code> ha due costruttori:
uno si usa per ricevere dati dalla rete, l’altro per inviarli, sotto sono riportate le loro segnature.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="nf">DatagramPacket</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">buff</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span></code></pre></div>

<p>in questo caso i dati si troveranno in buff</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="nf">DatagramPacket</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">buff</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">,</span> <span class="n">InetAddress</span> <span class="n">addr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">port</span><span class="o">)</span></code></pre></div>

<p>in quest’ altro si crea un datagramma per inviare il pacchetto di byte buff all’ host di indirizzo addr e
alla porta port Per operare su un oggetto di DatagramPacket si sono poi i seguenti metodi :</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">InetAddress</span> <span class="nf">getAddress</span><span class="o">()</span> 
<span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">int</span> <span class="nf">getPort</span><span class="o">()</span> 
<span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getData</span><span class="o">()</span> <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">int</span> <span class="nf">getLength</span><span class="o">()</span></code></pre></div>

<p>La classe DatagramSocket invece serve per inviare o ricevere un datagramma, anche qui troviamo diversi
costruttori :</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="nf">DatagramSocket</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SocketException</span></code></pre></div>

<p>legato ad una porta anonima, in quanto la porta di destinazione e’ parte del DatagramPacket.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="nf">DatagramSocket</span><span class="o">(</span><span class="kt">int</span> <span class="n">port</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SocketException</span> 
<span class="kd">public</span> <span class="nf">DatagramSocket</span><span class="o">(</span><span class="kt">int</span> <span class="n">port</span><span class="o">,</span> <span class="n">InetAddres</span> <span class="n">addr</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SocketException</span></code></pre></div>

<p>vi sono poi i metodi :</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="n">DatagramPacket</span> <span class="n">o</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> 
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">receive</span><span class="o">(</span><span class="n">DatagramPacket</span> <span class="n">p</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> 
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getLocalPort</span><span class="o">()</span> 
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span></code></pre></div>

<p>che ovviamente libera la porta occupata da quel socket Infine le opzioni per settare il timeout</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">setSoTimeout</span><span class="o">(</span><span class="kt">int</span> <span class="n">timeout</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SocketException</span></code></pre></div>

<p>e per conoscerne il valore</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">int</span> <span class="nf">getSoTimeout</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span></code></pre></div>

<h1 id="conclusione">Conclusione</h1>

<p>Abbiamo visto come sia facile e produttivo realizzare applicazioni che implementano il protocollo UDP con
Java, ne abbiamo individuato i punti di forza e le debolezza. Probabilmente chi ha a che fare come gli autori
con software di questa tipologia, vedra’ presto passare i costruttori verso i piu’ evoluti TCP o HTTP, esistono
gia’ infatti interessanti esempio di rilevatori di campo che utilizzano questi protocolli, specialmente http,
ma a parte i mercati USA, che tanto per cambiare sono sempre un decennio avanti a noi (dopotutto hanno iniziato
prima), dove sono ormai lo standard di fatto, in casa nostra si sentira’ parlare di UDP ancora per molto.
Quindi occhio ai datagrammi.</p>

"
    }
  

  
    ,{
      "title"			: "Come cancellare l'history comandi su linux.",
      "link"			: "http://massimocaliman.it/blog/come-cancellare-history-comandi-linux/",
      "excerpt"		: "false"
    }
  

  
    ,{
      "title"			: "Un package per il debugging in Java",
      "link"			: "http://massimocaliman.it/java/mokabyte-debug/",
      "excerpt"		: "<p>Pubblicato su <strong>MokaByte Numero 36 Dicembre 1999,di Massimo Caliman e Nicola Merello</strong>.
Questo articolo vuole mostrare come sia possibile creare un sistema di package che faciliti il debugging
di programmi scritti in Java.</p>

"
    }
  



  

  
    ,{
      "title"			: "About me",
      "link"			: "http://massimocaliman.it/about/",
      "excerpt"		: ""
    }
  

  
    ,{
      "title"			: "Bookmarks",
      "link"			: "http://massimocaliman.it/bookmarks/",
      "excerpt"		: ""
    }
  

  
    ,{
      "title"			: "Category Index",
      "link"			: "http://massimocaliman.it/categories/",
      "excerpt"		: ""
    }
  

  

  

  
    ,{
      "title"			: "Theme Setup",
      "link"			: "http://massimocaliman.it/theme-setup/",
      "excerpt"		: "Instructions on how to install and customize the Jekyll theme So Simple."
    }
  

  

  

  

  

  

  

  
    ,{
      "title"			: "Privacy Policy",
      "link"			: "http://massimocaliman.it/privacy/",
      "excerpt"		: ""
    }
  

  

  
    ,{
      "title"			: "Tag Index",
      "link"			: "http://massimocaliman.it/tags/",
      "excerpt"		: ""
    }
  

  
    ,{
      "title"			: "Terms and conditions",
      "link"			: "http://massimocaliman.it/terms/",
      "excerpt"		: ""
    }
  

]
