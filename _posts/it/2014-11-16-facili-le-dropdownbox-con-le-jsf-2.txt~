---
layout: post
title:  "Facili le dropdownbox con le JSF 2.2!"
category: articles
date:   2014-11-16 22:45:33
tags: [Articoli disponibili in lingua italiana,lang_it,Java,JavaServerFaces,JSF2]
comments: true
share: true
---

"Un anno speso nell'intelligenza artificiale è abbastanza perchè una persona creda in Dio"
*(Alan Perlis)*

Realizzare mappature dirette tra una Map e una dropdown box in jsf è immediato è facile. 
Dato un nostro session bean di esempio del tipo

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.inject.Named;
import javax.enterprise.context.SessionScoped;


@SessionScoped
@Named
public class ThatBean implements Serializable {
//stuff...


    private static final Map<String, Object> thatMap;
//stuff...
    private String thatId;
//stuff...


    static {
        thatMap = new LinkedHashMap<>();
        thatMap.put("TheDesc1", "TheKey1");
        thatMap.put("TheDesc2", "TheKey2");
    }
//stuff...


    public Map<String, Object> getThatMap() {
        return this.thatMap;
    }
//stuff...


    public String getThatId() {
        return thatId;
    }
//stuff...


    public void setThatId(String thatId) {
        this.thatId = thatId;
    }


}
Una nota 
@SessionScoped
@Named
Sostituiscono i vecchi deprecati 
@ManagedBean
@SessionScoped
Che ovviamente possiamo cmq continuare ad utilizzare






poi nella jsf xhtml 


<h:selectOneMenu  value="#{thatBean .thatId}">                                    
    <f:selectItems value="#{thatBean.thatMap}" />
</h:selectOneMenu>


la mappatura è automatica con key e value (occhio è invertito) del tag option del tag select. Questo però ci può condizionare un bel pò nel come riempiamo la nostra Map


Per un controllo più fine possiamo utilizzare la seguente forma


<h:selectOneMenu  value="#{thatBean.thatId}">                                                                                        
<f:selectItems 
value="#{thatBean.thatMap.entrySet()}" 
var="entry"   
itemValue="#{entry.key}" 
itemLabel="#{entry.value}" />
</h:selectOneMenu>


Nei casi più semplici, se non ho necessità di una Map e posso mettere i valori hard coded


<h:selectOneMenu  value="#{thatBean.thatId}">
   <f:selectItem itemValue="Key1" itemLabel="Label1” />
   <f:selectItem itemValue="Key2" itemLabel="Label2" />                                           
</h:selectOneMenu>                                                                                         


Il testo completo della pagina


<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:h="http://xmlns.jcp.org/jsf/html"
xmlns:f="http://xmlns.jcp.org/jsf/core">
<h:head>
<title>Dropdown box examples</title>
</h:head>
<h:body>
Dropdown box examples
<h:form>
Select 1
<h:selectOneMenu value="#{thatBean .thatId}">
<f:selectItems value="#{thatBean.thatMap}" />
</h:selectOneMenu>
Select 2
<h:selectOneMenu value="#{thatBean.thatId}">
<f:selectItems
value="#{thatBean.thatMap.entrySet()}"
var="entry"
itemValue="#{entry.key}"
itemLabel="#{entry.value}" />
</h:selectOneMenu>
Select 3
<h:selectOneMenu value="#{thatBean.thatId}">
<f:selectItem itemValue="Key1" itemLabel="Label1" />
<f:selectItem itemValue="Key2" itemLabel="Label2" />
</h:selectOneMenu>         
</h:form>
</h:body>
</html>
